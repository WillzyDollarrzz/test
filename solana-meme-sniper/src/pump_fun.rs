use anchor_lang :: prelude :: * ; declare_id ! ("6EF8rrecthR5Dkzon8Nwu78hRvfCKubJ14M5uBEwF6P") ; pub mod typedefs { # ! [doc = r" User-defined types."] use super :: * ; # [derive (AnchorSerialize , AnchorDeserialize , Clone)] # [derive (Copy)] # [derive (Debug)] # [derive (Default)] pub struct BondingCurve { pub virtual_token_reserves : u64 , pub virtual_sol_reserves : u64 , pub real_token_reserves : u64 , pub real_sol_reserves : u64 , pub token_total_supply : u64 , pub complete : bool , pub creator : Pubkey } # [derive (AnchorSerialize , AnchorDeserialize , Clone)] # [derive (Copy)] # [derive (Debug)] # [derive (Default)] pub struct CollectCreatorFeeEvent { pub timestamp : i64 , pub creator : Pubkey , pub creator_fee : u64 } # [derive (AnchorSerialize , AnchorDeserialize , Clone)] # [derive (Copy)] # [derive (Debug)] # [derive (Default)] pub struct CompleteEvent { pub user : Pubkey , pub mint : Pubkey , pub bonding_curve : Pubkey , pub timestamp : i64 } # [derive (AnchorSerialize , AnchorDeserialize , Clone)] # [derive (Copy)] # [derive (Debug)] # [derive (Default)] pub struct CompletePumpAmmMigrationEvent { pub user : Pubkey , pub mint : Pubkey , pub mint_amount : u64 , pub sol_amount : u64 , pub pool_migration_fee : u64 , pub bonding_curve : Pubkey , pub timestamp : i64 , pub pool : Pubkey } # [derive (AnchorSerialize , AnchorDeserialize , Clone)] # [derive (Debug)] # [derive (Default)] pub struct CreateEvent { pub name : String , pub symbol : String , pub uri : String , pub mint : Pubkey , pub bonding_curve : Pubkey , pub user : Pubkey , pub creator : Pubkey , pub timestamp : i64 , pub virtual_token_reserves : u64 , pub virtual_sol_reserves : u64 , pub real_token_reserves : u64 , pub token_total_supply : u64 } # [derive (AnchorSerialize , AnchorDeserialize , Clone)] # [derive (Copy)] # [derive (Debug)] # [derive (Default)] pub struct ExtendAccountEvent { pub account : Pubkey , pub user : Pubkey , pub current_size : u64 , pub new_size : u64 , pub timestamp : i64 } # [derive (AnchorSerialize , AnchorDeserialize , Clone)] # [derive (Copy)] # [derive (Debug)] # [derive (Default)] pub struct Global { pub initialized : bool , pub authority : Pubkey , pub fee_recipient : Pubkey , pub initial_virtual_token_reserves : u64 , pub initial_virtual_sol_reserves : u64 , pub initial_real_token_reserves : u64 , pub token_total_supply : u64 , pub fee_basis_points : u64 , pub withdraw_authority : Pubkey , pub enable_migrate : bool , pub pool_migration_fee : u64 , pub creator_fee_basis_points : u64 , pub fee_recipients : [Pubkey ; 7] , pub set_creator_authority : Pubkey } # [derive (AnchorSerialize , AnchorDeserialize , Clone)] # [derive (Copy)] # [derive (Debug)] # [derive (Default)] pub struct SetCreatorEvent { pub timestamp : i64 , pub mint : Pubkey , pub bonding_curve : Pubkey , pub creator : Pubkey } # [derive (AnchorSerialize , AnchorDeserialize , Clone)] # [derive (Copy)] # [derive (Debug)] # [derive (Default)] pub struct SetMetaplexCreatorEvent { pub timestamp : i64 , pub mint : Pubkey , pub bonding_curve : Pubkey , pub metadata : Pubkey , pub creator : Pubkey } # [derive (AnchorSerialize , AnchorDeserialize , Clone)] # [derive (Copy)] # [derive (Debug)] # [derive (Default)] pub struct SetParamsEvent { pub initial_virtual_token_reserves : u64 , pub initial_virtual_sol_reserves : u64 , pub initial_real_token_reserves : u64 , pub final_real_sol_reserves : u64 , pub token_total_supply : u64 , pub fee_basis_points : u64 , pub withdraw_authority : Pubkey , pub enable_migrate : bool , pub pool_migration_fee : u64 , pub creator_fee_basis_points : u64 , pub fee_recipients : [Pubkey ; 8] , pub timestamp : i64 , pub set_creator_authority : Pubkey } # [derive (AnchorSerialize , AnchorDeserialize , Clone)] # [derive (Copy)] # [derive (Debug)] # [derive (Default)] pub struct TradeEvent { pub mint : Pubkey , pub sol_amount : u64 , pub token_amount : u64 , pub is_buy : bool , pub user : Pubkey , pub timestamp : i64 , pub virtual_sol_reserves : u64 , pub virtual_token_reserves : u64 , pub real_sol_reserves : u64 , pub real_token_reserves : u64 , pub fee_recipient : Pubkey , pub fee_basis_points : u64 , pub fee : u64 , pub creator : Pubkey , pub creator_fee_basis_points : u64 , pub creator_fee : u64 } # [derive (AnchorSerialize , AnchorDeserialize , Clone)] # [derive (Copy)] # [derive (Debug)] # [derive (Default)] pub struct UpdateGlobalAuthorityEvent { pub global : Pubkey , pub authority : Pubkey , pub new_authority : Pubkey , pub timestamp : i64 } } pub mod state { # ! [doc = r" Structs of accounts which hold state."] use super :: * ; # [account] # [doc = " Account: BondingCurve"] # [derive (Copy)] # [derive (Default)] pub struct BondingCurve { pub virtual_token_reserves : u64 , pub virtual_sol_reserves : u64 , pub real_token_reserves : u64 , pub real_sol_reserves : u64 , pub token_total_supply : u64 , pub complete : bool , pub creator : Pubkey } # [account] # [doc = " Account: Global"] # [derive (Copy)] # [derive (Default)] pub struct Global { pub initialized : bool , pub authority : Pubkey , pub fee_recipient : Pubkey , pub initial_virtual_token_reserves : u64 , pub initial_virtual_sol_reserves : u64 , pub initial_real_token_reserves : u64 , pub token_total_supply : u64 , pub fee_basis_points : u64 , pub withdraw_authority : Pubkey , pub enable_migrate : bool , pub pool_migration_fee : u64 , pub creator_fee_basis_points : u64 , pub fee_recipients : [Pubkey ; 7] , pub set_creator_authority : Pubkey } } pub mod events { # ! [doc = r" Structs of events generated by program."] use super :: * ; # [event] # [derive (Debug)] # [derive (Default)] pub struct CollectCreatorFeeEvent { pub timestamp : i64 , pub creator : Pubkey , pub creator_fee : u64 } # [event] # [derive (Debug)] # [derive (Default)] pub struct CompleteEvent { pub user : Pubkey , pub mint : Pubkey , pub bonding_curve : Pubkey , pub timestamp : i64 } # [event] # [derive (Debug)] # [derive (Default)] pub struct CompletePumpAmmMigrationEvent { pub user : Pubkey , pub mint : Pubkey , pub mint_amount : u64 , pub sol_amount : u64 , pub pool_migration_fee : u64 , pub bonding_curve : Pubkey , pub timestamp : i64 , pub pool : Pubkey } # [event] # [derive (Debug)] # [derive (Default)] pub struct CreateEvent { pub name : String , pub symbol : String , pub uri : String , pub mint : Pubkey , pub bonding_curve : Pubkey , pub user : Pubkey , pub creator : Pubkey , pub timestamp : i64 , pub virtual_token_reserves : u64 , pub virtual_sol_reserves : u64 , pub real_token_reserves : u64 , pub token_total_supply : u64 } # [event] # [derive (Debug)] # [derive (Default)] pub struct ExtendAccountEvent { pub account : Pubkey , pub user : Pubkey , pub current_size : u64 , pub new_size : u64 , pub timestamp : i64 } # [event] # [derive (Debug)] # [derive (Default)] pub struct SetCreatorEvent { pub timestamp : i64 , pub mint : Pubkey , pub bonding_curve : Pubkey , pub creator : Pubkey } # [event] # [derive (Debug)] # [derive (Default)] pub struct SetMetaplexCreatorEvent { pub timestamp : i64 , pub mint : Pubkey , pub bonding_curve : Pubkey , pub metadata : Pubkey , pub creator : Pubkey } # [event] # [derive (Debug)] # [derive (Default)] pub struct SetParamsEvent { pub initial_virtual_token_reserves : u64 , pub initial_virtual_sol_reserves : u64 , pub initial_real_token_reserves : u64 , pub final_real_sol_reserves : u64 , pub token_total_supply : u64 , pub fee_basis_points : u64 , pub withdraw_authority : Pubkey , pub enable_migrate : bool , pub pool_migration_fee : u64 , pub creator_fee_basis_points : u64 , pub fee_recipients : [Pubkey ; 8] , pub timestamp : i64 , pub set_creator_authority : Pubkey } # [event] # [derive (Debug)] # [derive (Default)] pub struct TradeEvent { pub mint : Pubkey , pub sol_amount : u64 , pub token_amount : u64 , pub is_buy : bool , pub user : Pubkey , pub timestamp : i64 , pub virtual_sol_reserves : u64 , pub virtual_token_reserves : u64 , pub real_sol_reserves : u64 , pub real_token_reserves : u64 , pub fee_recipient : Pubkey , pub fee_basis_points : u64 , pub fee : u64 , pub creator : Pubkey , pub creator_fee_basis_points : u64 , pub creator_fee : u64 } # [event] # [derive (Debug)] # [derive (Default)] pub struct UpdateGlobalAuthorityEvent { pub global : Pubkey , pub authority : Pubkey , pub new_authority : Pubkey , pub timestamp : i64 } } pub mod ix_accounts { # ! [doc = r" Accounts used in instructions."] use super :: * ; # [derive (Accounts)] pub struct Buy < 'info > { pub global : AccountInfo < 'info > , # [account (mut)] pub fee_recipient : AccountInfo < 'info > , pub mint : AccountInfo < 'info > , # [account (mut)] pub bonding_curve : AccountInfo < 'info > , # [account (mut)] pub associated_bonding_curve : AccountInfo < 'info > , # [account (mut)] pub associated_user : AccountInfo < 'info > , # [account (mut)] pub user : Signer < 'info > , pub system_program : AccountInfo < 'info > , pub token_program : AccountInfo < 'info > , # [account (mut)] pub creator_vault : AccountInfo < 'info > , pub event_authority : AccountInfo < 'info > , pub program : AccountInfo < 'info > } # [derive (Accounts)] pub struct CollectCreatorFee < 'info > { # [account (mut)] pub creator : Signer < 'info > , # [account (mut)] pub creator_vault : AccountInfo < 'info > , pub system_program : AccountInfo < 'info > , pub event_authority : AccountInfo < 'info > , pub program : AccountInfo < 'info > } # [derive (Accounts)] pub struct Create < 'info > { # [account (mut)] pub mint : Signer < 'info > , pub mint_authority : AccountInfo < 'info > , # [account (mut)] pub bonding_curve : AccountInfo < 'info > , # [account (mut)] pub associated_bonding_curve : AccountInfo < 'info > , pub global : AccountInfo < 'info > , pub mpl_token_metadata : AccountInfo < 'info > , # [account (mut)] pub metadata : AccountInfo < 'info > , # [account (mut)] pub user : Signer < 'info > , pub system_program : AccountInfo < 'info > , pub token_program : AccountInfo < 'info > , pub associated_token_program : AccountInfo < 'info > , pub rent : AccountInfo < 'info > , pub event_authority : AccountInfo < 'info > , pub program : AccountInfo < 'info > } # [derive (Accounts)] pub struct ExtendAccount < 'info > { # [account (mut)] pub account : AccountInfo < 'info > , pub user : Signer < 'info > , pub system_program : AccountInfo < 'info > , pub event_authority : AccountInfo < 'info > , pub program : AccountInfo < 'info > } # [derive (Accounts)] pub struct Initialize < 'info > { # [account (mut)] pub global : AccountInfo < 'info > , # [account (mut)] pub user : Signer < 'info > , pub system_program : AccountInfo < 'info > } # [derive (Accounts)] pub struct Migrate < 'info > { pub global : AccountInfo < 'info > , # [account (mut)] pub withdraw_authority : AccountInfo < 'info > , pub mint : AccountInfo < 'info > , # [account (mut)] pub bonding_curve : AccountInfo < 'info > , # [account (mut)] pub associated_bonding_curve : AccountInfo < 'info > , pub user : Signer < 'info > , pub system_program : AccountInfo < 'info > , pub token_program : AccountInfo < 'info > , pub pump_amm : AccountInfo < 'info > , # [account (mut)] pub pool : AccountInfo < 'info > , # [account (mut)] pub pool_authority : AccountInfo < 'info > , # [account (mut)] pub pool_authority_mint_account : AccountInfo < 'info > , # [account (mut)] pub pool_authority_wsol_account : AccountInfo < 'info > , pub amm_global_config : AccountInfo < 'info > , pub wsol_mint : AccountInfo < 'info > , # [account (mut)] pub lp_mint : AccountInfo < 'info > , # [account (mut)] pub user_pool_token_account : AccountInfo < 'info > , # [account (mut)] pub pool_base_token_account : AccountInfo < 'info > , # [account (mut)] pub pool_quote_token_account : AccountInfo < 'info > , pub token_2022_program : AccountInfo < 'info > , pub associated_token_program : AccountInfo < 'info > , pub pump_amm_event_authority : AccountInfo < 'info > , pub event_authority : AccountInfo < 'info > , pub program : AccountInfo < 'info > } # [derive (Accounts)] pub struct Sell < 'info > { pub global : AccountInfo < 'info > , # [account (mut)] pub fee_recipient : AccountInfo < 'info > , pub mint : AccountInfo < 'info > , # [account (mut)] pub bonding_curve : AccountInfo < 'info > , # [account (mut)] pub associated_bonding_curve : AccountInfo < 'info > , # [account (mut)] pub associated_user : AccountInfo < 'info > , # [account (mut)] pub user : Signer < 'info > , pub system_program : AccountInfo < 'info > , # [account (mut)] pub creator_vault : AccountInfo < 'info > , pub token_program : AccountInfo < 'info > , pub event_authority : AccountInfo < 'info > , pub program : AccountInfo < 'info > } # [derive (Accounts)] pub struct SetCreator < 'info > { pub set_creator_authority : Signer < 'info > , pub global : AccountInfo < 'info > , pub mint : AccountInfo < 'info > , pub metadata : AccountInfo < 'info > , # [account (mut)] pub bonding_curve : AccountInfo < 'info > , pub event_authority : AccountInfo < 'info > , pub program : AccountInfo < 'info > } # [derive (Accounts)] pub struct SetMetaplexCreator < 'info > { pub mint : AccountInfo < 'info > , pub metadata : AccountInfo < 'info > , # [account (mut)] pub bonding_curve : AccountInfo < 'info > , pub event_authority : AccountInfo < 'info > , pub program : AccountInfo < 'info > } # [derive (Accounts)] pub struct SetParams < 'info > { # [account (mut)] pub global : AccountInfo < 'info > , # [account (mut)] pub authority : Signer < 'info > , pub event_authority : AccountInfo < 'info > , pub program : AccountInfo < 'info > } # [derive (Accounts)] pub struct UpdateGlobalAuthority < 'info > { # [account (mut)] pub global : AccountInfo < 'info > , pub authority : Signer < 'info > , pub new_authority : AccountInfo < 'info > , pub event_authority : AccountInfo < 'info > , pub program : AccountInfo < 'info > } } use ix_accounts :: * ; pub use state :: * ; pub use typedefs :: * ; # [program] pub mod pump { # ! [doc = " Anchor CPI crate generated from pump v0.1.0 using [anchor-gen](https://crates.io/crates/anchor-gen) v0.4.1."] use super :: * ; pub fn buy (_ctx : Context < Buy > , _amount : u64 , _max_sol_cost : u64) -> Result < () > { unimplemented ! ("This program is a wrapper for CPI.") } pub fn collect_creator_fee (_ctx : Context < CollectCreatorFee > ,) -> Result < () > { unimplemented ! ("This program is a wrapper for CPI.") } pub fn create (_ctx : Context < Create > , _name : String , _symbol : String , _uri : String , _creator : Pubkey) -> Result < () > { unimplemented ! ("This program is a wrapper for CPI.") } pub fn extend_account (_ctx : Context < ExtendAccount > ,) -> Result < () > { unimplemented ! ("This program is a wrapper for CPI.") } pub fn initialize (_ctx : Context < Initialize > ,) -> Result < () > { unimplemented ! ("This program is a wrapper for CPI.") } pub fn migrate (_ctx : Context < Migrate > ,) -> Result < () > { unimplemented ! ("This program is a wrapper for CPI.") } pub fn sell (_ctx : Context < Sell > , _amount : u64 , _min_sol_output : u64) -> Result < () > { unimplemented ! ("This program is a wrapper for CPI.") } pub fn set_creator (_ctx : Context < SetCreator > , _creator : Pubkey) -> Result < () > { unimplemented ! ("This program is a wrapper for CPI.") } pub fn set_metaplex_creator (_ctx : Context < SetMetaplexCreator > ,) -> Result < () > { unimplemented ! ("This program is a wrapper for CPI.") } pub fn set_params (_ctx : Context < SetParams > , _initial_virtual_token_reserves : u64 , _initial_virtual_sol_reserves : u64 , _initial_real_token_reserves : u64 , _token_total_supply : u64 , _fee_basis_points : u64 , _withdraw_authority : Pubkey , _enable_migrate : bool , _pool_migration_fee : u64 , _creator_fee_basis_points : u64 , _set_creator_authority : Pubkey) -> Result < () > { unimplemented ! ("This program is a wrapper for CPI.") } pub fn update_global_authority (_ctx : Context < UpdateGlobalAuthority > ,) -> Result < () > { unimplemented ! ("This program is a wrapper for CPI.") } }